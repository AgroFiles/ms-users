version: '3.8'

services:
  # Servicio de la base de datos PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: ktor-postgres-db
    environment:
      # Estas son las credenciales para la base de datos.
      # PostgreSQL las usará para inicializarse.
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ktordb
    volumes:
      # Este volumen hará que los datos de la BD persistan si reinicias el contenedor
      - db-data:/var/lib/postgresql/data
    ports:
      # Mapeamos el puerto 5432 del contenedor al 5432 de tu máquina
      # para que puedas conectarte con un cliente de BD si lo necesitas.
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ktordb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servicio de tu aplicación Ktor
  app:
    build: . # Construye la imagen a partir del Dockerfile en el directorio actual
    container_name: ktor-service
    ports:
      # Mapeamos el puerto 8080 del contenedor al 8080 de tu máquina
      - "8080:8080"
    environment:
      # Aquí inyectamos las variables de entorno que tu app espera.
      # ¡Fíjate cómo nos conectamos a la base de datos!
      DB_HOST: db # "db" es el nombre del servicio de la base de datos definido arriba
      DB_PORT: 5432
      DB_NAME: ktordb      # Debe coincidir con POSTGRES_DB
      DB_USER: user        # Debe coincidir con POSTGRES_USER
      DB_PASSWORD: password  # Debe coincidir con POSTGRES_PASSWORD
    depends_on:
      # Le decimos a Docker que este servicio depende de que la base de datos
      # esté saludable (gracias al healthcheck) antes de arrancar.
      db:
        condition: service_healthy

volumes:
  # Definimos el volumen nombrado para la persistencia de datos
  db-data:
